K := x, [t1, t2], [1/x, 1/(x*t1)]: 
Data := []: 
k := 5: 
for i from 6 to 12 do 
   data := []: 
   for j from 1 to k do 
       f := randpoly([x, t1, t2], dense, degree = floor((1/2)*i))^2*(1/randpoly([x, t1, t2], dense, degree = floor((1/2)*i))^3): 
       fs := 1/randpoly([x, t1, t2], dense, degree = ceil((1/2)*i)): 
       g := normal(DField:-Derivative(K, f)/f): 
       a, d := numer(g), denom(g): 
       as, ds := numer(fs), denom(fs): 
       r := rem(a, d, t2):  rs := rem(as, ds, t2): 
       h := normal(r/d+rs/ds): 
       if h = 0 then 
          print(zero_is_found);
       else 
          data := [op(data), h]: 
       end if: 
    end do: 
       Data := [op(Data), data]:
end do: