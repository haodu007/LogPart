Rational  := module ()
  option package;
  description "The module includes basic operations on multivariate rational functions";
  export
     EEA,
     ExtendedEuclidean,
     ExtendedEuclideanOld,
     HeadTerm,
     LaurentMatryoshka,
     Matryoshka,
     NormallyProperAndLaurentPolynomialParts,
     ProperAndPolynomialParts;
  local
    DecompositionOfCoefficients,
    DecompositionOfLaurentCoefficients,
    SelectHeadMonomial;

####################################################
# Name: EEA
# Calling sequence
#             EEA(x, r, L, q)
# Input: x, an indeterminate,
#           r, a polynomial in x,
#           L=[p_1, p_2, ..., p_n], a list of polynomials in x
#           q, a polynomial,
# Output: u, v, two polynomials such that 
#               u*p_1* ...*p_n + v*q = r
# Remark:   assume gcd(p_1*...p_n, q)=1
#####################################################

EEA := proc(x, r, L, q)
             local n, p, M, u, v, w, i, f, g, f1, q1, c, cf, cq;
             n := nops(L);
             M := []; p := 1; cf := 1;
             for i from 1 to n do
                  f := normal(L[i]);
                  p := p*f; 
                  #normalize q and f s.t. they are polynomials in all variables and have content 1
                  f1 := primpart(numer(f), x, 'c');
                  cf := cf*c/denom(f);
                  q1 := primpart(numer(normal(q)), x, 'cq');
                  g := gcdex(f1, q1, x, 'w');
                   if degree(g, x) > 0 then
                      error("input error");
                   end if; 
                   M:=[op(M), w];
              end do;
              u := rem(r, q1, x);
              for i from 1 to n do
                   u := rem(u*M[i], q1, x);
               end do;
               u := u/cf;
               v := normal((r-u*p)/q);
              return u, v;
end proc; 

 ##################################################################################
 # Name: ExtendedEuclidean 
 # Calling sequence: ExtendedEuclidean(x, p, a, b)
 # Input:   x,  a variable;
 #          p, a, b,  three polynomials of x with gcd(a, b) = 1;
 # Output:  [u, v],  two polynomials such that p = u*a + v*b with deg(u) < deg(b).
 ##################################################################################


 ExtendedEuclidean := proc(x, p, a, b)
     local h, aa, bb, a1, b1,aa1, bb1, d1, d2,  u, v, pp1, pp2, t, c1, c2, q, s, T, a2, b2;
     aa :=normal(a);
     bb := normal(b);
     (a1, a2) :=numer(aa), denom(aa);
     (b1, b2) := numer(bb), denom(bb);
     (aa1,bb1) :=primpart(a1,x, 'd1'), primpart(b1, x, 'd2');
     h := gcdex(aa1, bb1, x, 's');
     if degree(h, x) > 0 then
         error "a nontrivial gcd is found";
     end if;
     T := time();
     print(begin_rem);
     u := rem(s*p, bb1, x);
     print(remainder_taken); print(time()-T);
     pp1 := primpart(normal(p - u*aa1), x, 'c1');
     #pp2 := primpart(b, x, 'c2');
     t := evala(Divide(pp1, bb1, 'qu'));
     if t = false then 
        error "the division is not exact";
     end if;
     v := normal(c1)*qu;
     return [normal(a2/d1)*u, normal(b2/d2)*v];
 end proc:

 ##################################################################################
 # Name: ExtendedEuclideanOld 
 # Calling sequence: ExtendedEuclideanOld(x, p, a, b)
 # Input:   x,  a variable;
 #          p, a, b,  three polynomials of x with gcd(a, b) = 1;
 # Output:  [u, v],  two polynomials such that p = u*a + v*b with deg(u) < deg(b).
 ##################################################################################

 ExtendedEuclideanOld := proc(x, p, a, b)
     local h, u, v, pp1, pp2, t, c1, c2, q, s, T;
     h := gcdex(a, b, x, 's');
     if degree(h, x) > 0 then
         error "a nontrivial gcd is found";
     end if;
     T := time();
     print(begin_rem);
     u := rem(s*p, b, x);
     print(remainder_taken); print(time()-T);
     pp1 := primpart(normal(p - u*a), x, 'c1');
     pp2 := primpart(b, x, 'c2');
     t := evala(Divide(pp1, pp2, 'qu'));
     if t = false then 
        error "the division is not exact";
     end if;
     v := normal(c1/c2)*qu;
     [u, v];
 end proc:

####################################################
# Name: ProperAndPolynomialParts
# Calling sequence: ProperAndPolynomialParts(f, t)
# Input:   f,   a rational function of t;
#          t,   an indeterminate.
# Output:  fp,  the proper fraction part of f;
#          pp,  the polynomial part of f.
####################################################

ProperAndPolynomialParts := proc(f, t)
   local num, den, r, pp, fp;
   (num, den) := numer(f), denom(f);
   r := rem(num, den, t, 'pp');
   fp := r/den;
   return normal(fp), normal(pp);
end proc:

############################################################################################# 
# Name: NormallyProperAndLaurentPolynomialParts
#Calling sequence:
#            NormallyProperAndLaurentPolynomialParts(f, t)
#
# Input:     f,   a rational function in t
# Output:  [f1, f2] such that 
#               f = f1+f2,
#               where f1 is t-proper with den(f) not divisible by t, and f2 is a Laurent polynomial in t;
################################################################################# 
NormallyProperAndLaurentPolynomialParts := proc(f, t)
   local  num, den, pp, fp, r, b, i, a,  M, f1, f2;

   #compute the polynomal part and the fraction part of f 

   (num, den) := numer(f), denom(f);

   r  := rem(num, den, t, 'pp');
   fp := r/den;
   b := den; 

  #compute ord_t(den(f)), i.e i

   i  := 0;
   while rem(b, t, t, 'a') = 0 do
      i := i+1;
      b := a;
   end do;

   M := ExtendedEuclidean(t, r, t^i, b);
   f1 := M[1]/b;
   f2 := expand( ((M[2]/t^i))+pp);
   return ([f1, f2]);

end proc: 


#############################################################################################
# Name: DecompositionOfCoefficients
# Calling sequence:  DecompositionOfCoefficients(f, L, t)
# Input: f,   a (multivariate) polynomial of indeterminates in L;
#        L,   a list of indeterminates (in the ascending order w.r.t the purely lex order);
#        t,   an indeterminate (not in L) in the coefficient field of f.
# Output: fp, pp,
#         fp,  a polynomial of L, with all coefficients being t-proper;
#         pp,  a polynomial of [L, t] such that f = fp + pp.
#############################################################################################

DecompositionOfCoefficients := proc(f, L, t)
   local g, c, X, P, fp, pp;
   g :=  normal(f);
   fp := 0;
   pp := 0;

   while g <> 0 do
      c := lcoeff(g, L, 'X');
      P := ProperAndPolynomialParts(c, t);
      fp := normal(fp + P[1]*X);
      pp := normal(pp + P[2]*X);
      g := normal(g - c*X);
   end do:

   return fp, pp;
end proc:

######################################################################################## 
# Name: DecompositionOfLaurentCoefficients
#
# Calling sequence:  DecompositionOfLaurentCoefficients(f, L, t)
#
# Input: f,   a (multivariate) Laurent polynomial of indeterminates in L;
#        L,   a list of indeterminates (in the ascending order w.r.t the purely lex order);
#        t,   an indeterminate (not in L) in the coefficient field of f.
# Output: fp, pp,
#         fp,  a polynomial of L, with all coefficients being normally t-proper;
#         pp,  a polynomial of [L, t] such that f = fp + pp.
############################################################################################# 
DecompositionOfLaurentCoefficients := proc(f, L, t)
   local g, c, X, P, fp, pp;
   g :=  normal(f);
   fp := 0;
   pp := 0; 
   while g <> 0 do
      c := lcoeff(g, L, 'X');
      P := NormallyProperAndLaurentPolynomialParts(c, t);
      fp := normal(fp + P[1]*X);
      pp := normal(pp + P[2]*X);
      g := normal(g - c*X);
   end do:
   return fp, pp;
end proc: 

###############################################################################################################
# Name:  Matryoshka
# Calling sequence:  Matryoshka(T, f)
# Input: T,   T = [t1, t2, .., tn], a nonzero list of indeterminates in the ascending order w.r.t the purely lex order,
#             K_0 < K(t1) = K_1 < K_1(t2) = K_2 <..< K_{n-1}(tn) = K_n, where K_0 is the base field;
#        f,   a rational function in K_0(T).
# Output: F = [f0, f1, .., fn],
#         f0,  a polynomial in K_0[T];
#         fi,  a polynomial in K_i[t_{i+1}, .., tn],
#              and all coefficients of f_i are ti-proper,    i = 1, .., n - 1;
#         fn,  a tn-proper rational function in K_n.
###############################################################################################################

Matryoshka := proc(T, f)
    local n, Q, F, L, g, i, P;
    n := nops(T);
    Q := ProperAndPolynomialParts(f, T[n]);

    # Q[1] is a rational function in K_n, which is T[n]-proper

    F := [Q[1]];
    L := [];
    g := Q[2];
    for i from n by -1 to 2 do
        L := [T[i], op(L)];
        P := DecompositionOfCoefficients(g, L, T[i - 1]);
        F := [P[1], op(F)];
        g := P[2];
    end do:
    F := [g, op(F)];
    return F;
end proc:


###################################################################################################################
# Name: SelectHeadMonomial
# Calling sequence: SelectHeadMonomial(T, M, P, i)
# Input: T, a list of indeterminates in ascending order;
#        M, a given monomial;
#        P, a component in the matryoshka decomposition of a rational function;
#        i, the subscript of P in the matryoshka decomposition, 0 <= i < n.
# Output: s, c, m;
#         s = 0 if the head monomial of P is lower than M. In this case, c = 0 and m = M;
#         s = 1 if the head monomial of P is equal to M. In this case, c is the head coeff of P and m = M;
#         s = 2 if the head monomial of P is higher than M. In this case, c is the head coeff of P  and m = hm_i(P);
####################################################################################################################

SelectHeadMonomial := proc(T, M, P, i)
    local n, X, L, t, m, j;

    #-------------------------
    # A special case
    #-------------------------

    if P = 0 then
       if M <> 0 then
          return 0, 0, M;
       end if;
       return 1, 0, 0;
    end if;

    #--------------------------
    # Initialize
    #--------------------------

    n := nops(T);
    X := seq(T[n-j], j=0..n-i-1);
    L := Groebner:-LeadingTerm(P, plex(X));

    if M = 0 then
       return 2, L[1], L[2];
    end if;
    if M = L[2] then
       return 1, L[1], M;
    end if;
    t := Groebner:-TestOrder(M, L[2], plex(seq(T[n-j], j=0..n-1)));
    if t then
       return 2, L[1], L[2];
    else
       return 0, 0, M;
    end if;
end proc:


#########################################################################################
# Name: HeadTerm
# Calling sequence: HeadTerm(T, P)
# Input: T, a list of indeterminates in ascending order;
#        P, a matryoshka decomposition of a rational function in T.
# Output: hm, the head monomial of P;
#         hc, a list, whose components are the head coeffs of P[i] with hm_i = hm;
#         hi, the list of subscripts, whose corresponding components in P have the same
#             head monomials as  hm, i.e. 0 <= i <= n for any i in P.
#########################################################################################

HeadTerm := proc(T, P)
        local n, hm, hc, hi, i, L, s, c, m, p;

        #---------------------------------
        # initialize
        #---------------------------------

        n := nops(T);
        (hm, hc, hi) := 0, [], [];

        #----------------------------------
        # search
        #----------------------------------

        for i from 0 to n-1 do
            L := SelectHeadMonomial(T, hm, P[i+1], i);
            (s, c, m) := L[1], L[2], L[3];
            if s = 1 then
               hc := [op(hc), c];
               hi := [op(hi), i];
            end if;
            if s = 2 then
               hm := m;
               hc := [c];
               hi := [i];
            end if;
        end do;

        #--------------------------------
        # handle the last component
        #--------------------------------

        p := P[n+1];
        if p = 0 and hm = 0 then
           hc := [op(hc), p];
           hi :=[op(hi), n];
        end if;
        if p <> 0 and hm = 1 then
           hc := [op(hc), p];
           hi := [op(hi), n];
        end if;
        if p  <> 0 and hm = 0 then
           hm := 1;
           hc := [p];
           hi  := [n];
        end if;

        hm, hc, hi;
end proc:

########################################################################### 
# Name:  LaurentMatryoshka
# Calling sequence:  LaurentMatryoshka(T, f)
# Input: T,   T = [t1, t2, .., tn], a nonzero list of indeterminates in the ascending order w.r.t the purely lex order,
#             K_0 < K(t1) = K_1 < K_1(t2) = K_2 <..< K_{n-1}(tn) = K_n, where K_0 is the base field;
#             f,   a rational function in K_0(T).
# Output: F = [f0, f1, .., fn],
#         f0,  a polynomial in K_0[t1 ,..., tn, t1^(-1), ....,tn^(-1)] ;
#         fi,  a polynomial in K_i[t_{i+1}, .., tn, t_{i+1}^(-1), ....,tn^(-1)],
#              and all coefficients of f_i are normally ti-proper,    i = 1, .., n - 1;
#         fn,  a normally tn-proper rational function in K_n.
#############################################################################

LaurentMatryoshka := proc(T, f)
    local n, Q, F, L, g, i, P;

    n := nops(T);
    Q := NormallyProperAndLaurentPolynomialParts(f, T[n]); 

    # Q[1] is a rational function in K_n, which is T[n]-proper 

    F := [Q[1]];
    L := [];
    g := Q[2];
    for i from n by -1 to 2 do
        L := [T[i], op(L)];
        P := DecompositionOfLaurentCoefficients(g, L, T[i - 1]);
        F := [normal(P[1]), op(F)];
        g := normal(P[2]);
    end do:

    F := [g, op(F)];

    return F;

end proc: 


end module:

